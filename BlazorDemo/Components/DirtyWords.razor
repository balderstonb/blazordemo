@using Microsoft.AspNetCore.Components
@inject SessionState state

@if (AllDirtyWords != null && AllDirtyWords.Count > 0)
{
    <button class="btn btn-primary" @onclick="AddAll">Add All</button><br />

    @foreach (var word in AllDirtyWords)
    {
        <button class="btn btn-link" @onclick="(()=> AddWord(word))">Add</button> @word
        <br />
    }
}

@if (SelectedDirtyWords != null && SelectedDirtyWords.Count > 0)
{
    <button class="btn btn-primary" @onclick="RemoveAll">Remove All</button><br />

    @foreach (var word in SelectedDirtyWords)
    {
        <button class="btn btn-link" @onclick="(()=> RemoveWord(word))">Remove</button> @word
        <br />
    }
}

<input @bind="@NewWord" />

<button class="btn btn-primary" @onclick="AddNewWord">Add</button>

@code {
    [Parameter]
    public List<string> AllDirtyWords { get; set; }

    List<string> SelectedDirtyWords { get; set; }

    string NewWord { get; set; }

    [Parameter]
    public string UserId { get; set; }

    void AddAll()
    {
        if (SelectedDirtyWords == null)
        {
            SelectedDirtyWords = new List<string>();
        }

        SelectedDirtyWords = SelectedDirtyWords.Union(AllDirtyWords).Distinct().ToList();
    }

    void RemoveAll()
    {
        SelectedDirtyWords = new List<string>();

        state.SetDirtyWords(UserId, SelectedDirtyWords);
    }

    void RemoveWord(string word)
    {
        SelectedDirtyWords.Remove(word);

        state.SetDirtyWords(UserId, SelectedDirtyWords);
    }

    void AddWord(string word)
    {
        if (SelectedDirtyWords == null)
        {
            SelectedDirtyWords = new List<string>();
        }

        SelectedDirtyWords.Add(word);

        state.SetDirtyWords(UserId, SelectedDirtyWords);
    }

    void AddNewWord()
    {
        if (SelectedDirtyWords == null)
        {
            SelectedDirtyWords = new List<string>();
        }

        SelectedDirtyWords.Add(NewWord);

        state.SetDirtyWords(UserId, SelectedDirtyWords);
    }
}
